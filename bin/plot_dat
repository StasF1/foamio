#!/usr/bin/env python3
import argparse
from pathlib import Path

import matplotlib.animation as animation
import matplotlib.pyplot as plt
from foam2py import read_dat


class ArgementsHandler():

    def __init__(self) -> None:
        parser = argparse.ArgumentParser(
            description='Monitor data using matplotlib.',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

        parser.add_argument(
            'loc',
            metavar='FILE_OR_DIR',
            type=Path,
            help='.dat-file path or directory with .dat-files.')

        parser.add_argument('-t',
                            '--title',
                            type=str,
                            help='graph title - OpenFOAM case name by default')
        parser.add_argument('-st',
                            '--subtitle',
                            type=str,
                            help='graph subtitle - .dat file name without'
                            ' extension by default')
        parser.add_argument('-l',
                            '--logscale',
                            action='store_true',
                            help='plots data (y-axis) on log scale - for'
                            ' "residuals.dat" sets automatically')
        parser.add_argument('-r',
                            '--refresh',
                            type=int,
                            default=10,
                            help='refreshes display every <time> sec')
        parser.add_argument('-uc',
                            '--usecols',
                            type=int,
                            nargs='+',
                            help='column indices (using header in .dat-file)'
                            ' to plot')
        parser.add_argument('-b',
                            '--background',
                            action='store_true',
                            help='open in background mode - save .svg plot'
                            ' alongside')

        self.__args = parser.parse_args()

    @property
    def args(self):
        return self.__args

    def validate(self):
        """Arguments additional validation."""

        self.__args.loc = self.__args.loc.resolve()

        titles = self.__get_titles(self.__args.loc)
        self.__args.title = (titles[0] if self.__args.title is None else
                             self.__args.title)
        self.__args.subtitle = (titles[1] if self.__args.subtitle is None else
                                self.__args.subtitle)

        self.__args.logscale = (self.__args.logscale
                                or 'residuals' in str(self.__args.loc))

        return self

    @staticmethod
    def __get_titles(loc) -> tuple:
        """Get OpenFOAM-case name and post-processing function name 
        if the .dat file is located in postProcessing/ folder.
        """

        if not 'postProcessing' in str(loc.parts):
            return None

        folders = list(loc.parts)
        ind = folders.index('postProcessing')
        return (folders[ind - 1], folders[ind + 1])


def plot(ax, args) -> None:
    """Draw plot."""

    read_dat(args.loc, usecols=args.usecols).plot(ax=ax,
                                                  title=args.subtitle,
                                                  logy=args.logscale,
                                                  grid=True)


def main() -> None:

    def animate(frame: int) -> None:
        ax.clear()
        plot(ax, args)

    args = ArgementsHandler().validate().args

    fig = plt.figure(figsize=(10, 6))
    fig.suptitle(args.title, fontweight='bold', fontsize=16)

    ax = fig.add_subplot()
    plot(ax, args)

    if args.refresh and not args.background:
        ani = animation.FuncAnimation(fig,
                                      animate,
                                      interval=args.refresh * 1e+3)

    plt.tight_layout()
    if args.background:
        plt.savefig(
            Path(args.loc if args.loc.is_dir() else args.loc.parent,
                 'dat.png'))
    else:
        plt.show(block=True)


if __name__ == '__main__':
    main()

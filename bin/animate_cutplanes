#!/usr/bin/env python3
import argparse
from pathlib import Path
from typing import Union

import numpy as np
import pyvista as pv
from tqdm import tqdm


class ArgementsHandler():

    def __init__(self) -> None:
        parser = argparse.ArgumentParser(
            description='Generate movie from VTK cut-planes (pyvista wrapper).',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

        parser.add_argument('cutplane_dir',
                            metavar='DIR',
                            type=Path,
                            help='folder with .vtk-cutplanes')
        parser.add_argument('field',
                            metavar='FIELD_NAME',
                            type=str,
                            help='field name')
        parser.add_argument('cpos',
                            metavar='CAMERA_POS',
                            nargs='+',
                            help='camera position')
        parser.add_argument('--clim',
                            type=float,
                            nargs='+',
                            help='colormap limits')
        parser.add_argument('-r',
                            '--rotate',
                            type=float,
                            nargs='+',
                            help='rotate vector and angle of rotation, format:'
                            ' [i j k angle]')
        parser.add_argument('-ws',
                            '--windowsize',
                            type=float,
                            default=None,
                            help='window size')
        parser.add_argument('-z',
                            '--zoom',
                            type=float,
                            default=1.,
                            help='zoom')
        parser.add_argument('--cmap',
                            type=str,
                            default='rainbow',
                            help='color map')
        parser.add_argument('-fr',
                            '--framerate',
                            type=int,
                            default=10,
                            help='framerate')
        parser.add_argument('-f',
                            '--overwrite',
                            action='store_true',
                            help='overwrite if video is already exist')

        self.__args = parser.parse_args()
        self.__validate()

    @property
    def args(self):
        return self.__args

    def __validate(self) -> None:

        # cpos
        if len(self.__args.cpos) == 1:
            self.__args.cpos = self.__args.cpos[0]
        elif len(self.__args.cpos) == 3:
            self.__args.cpos = [float(c) for c in self.__args.cpos]
        elif len(self.__args.cpos) == 9:
            raise NotImplementedError('position, focal_point, and view up')
        else:
            raise ValueError(
                'Camera description must be one of the following:\n'
                '- Iterable containing position, focal_point, and view up: `len(list[float]) == 9`\n'
                '- Iterable containing a view vector: `len(list[float]) == 3`\n'
                '- A string containing the plane orthogonal to the view direction: "xy"\n\n'
                'See more: https://docs.pyvista.org/api/core/camera.html')

        # rotate
        if not self.__args.rotate is None and len(self.__args.rotate) < 4:
            raise ValueError('rotate vector format is [i j k angle]')


def animate_cutplane(cutplane_dir: Path,
                     field: str,
                     camera_pos: Union[str, tuple, list],
                     *,
                     overwrite: bool = True,
                     rotate_args: list = None,
                     window_size: tuple = None,
                     zoom: float = 1.,
                     in_range: list = None,
                     framerate: int = 10,
                     **mesh_kwargs) -> None:
    """Generate movie from VTK cut-planes."""

    def set_timelabel(vtk_path: Path) -> None:
        plotter.add_text(f'Time: {float(vtk_path.parent.name):.5f}, s',
                         name='timelabel')

    video = Path(cutplane_dir, f'{field}.mp4')
    vtk_paths = sorted(cutplane_dir.glob(f'[0-1]*/{field}_cutPlane.vtk'))

    if not overwrite and video.is_file():
        return
    elif not vtk_paths:
        raise ValueError(f'no field with name "{field}"'
                         f' found for "{cutplane_dir.stem}"')

    frames: pv.MultiBlock = pv.read(list(np.array(vtk_paths, dtype=str)))
    if in_range is None:
        mins, maxs = ([frame.point_data[field].min() for frame in frames],
                      [frame.point_data[field].max() for frame in frames])
        mesh_kwargs['clim'] = [np.median(mins), np.median(maxs)]
    else:
        mesh_kwargs['clim'] = in_range

    plotter = pv.Plotter(off_screen=True, notebook=False)
    plotter.open_movie(str(video), framerate=framerate)

    mesh = frames.get(0)
    if not rotate_args is None:
        mesh.rotate_vector(rotate_args[:3], rotate_args[3], inplace=True)

    plotter.add_mesh(mesh, scalars=field, **mesh_kwargs)
    set_timelabel(vtk_paths[0])

    plotter.show(cpos=camera_pos, window_size=window_size, auto_close=False)
    plotter.camera.zoom(zoom)
    plotter.write_frame()

    for vtk_path, frame in zip(load_bar := tqdm(vtk_paths[1:]), frames[1:]):
        load_bar.set_description(
            f'animating "{field}" in {mesh_kwargs["clim"]}'
            f' @ {vtk_path.parent.name}')
        mesh.point_data[field] = frame.point_data[field]
        set_timelabel(vtk_path)
        plotter.write_frame()

    plotter.close()


def main() -> None:

    args = ArgementsHandler().args
    animate_cutplane(
        args.cutplane_dir,
        args.field,
        args.cpos,
        in_range=args.clim,
        rotate_args=args.rotate,
        window_size=args.windowsize,
        zoom=args.zoom,
        framerate=args.framerate,
        overwrite=args.overwrite,
        cmap=args.cmap,
    )


if __name__ == '__main__':
    main()
